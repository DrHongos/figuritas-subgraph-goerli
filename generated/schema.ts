// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class UserE extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserE entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserE entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserE", id.toString(), this);
  }

  static load(id: string): UserE | null {
    return store.get("UserE", id) as UserE | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get albums(): Array<string> {
    let value = this.get("albums");
    return value.toStringArray();
  }

  set albums(value: Array<string>) {
    this.set("albums", Value.fromStringArray(value));
  }

  get albumsCreated(): Array<string> {
    let value = this.get("albumsCreated");
    return value.toStringArray();
  }

  set albumsCreated(value: Array<string>) {
    this.set("albumsCreated", Value.fromStringArray(value));
  }
}

export class AlbumCollectionE extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AlbumCollectionE entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AlbumCollectionE entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AlbumCollectionE", id.toString(), this);
  }

  static load(id: string): AlbumCollectionE | null {
    return store.get("AlbumCollectionE", id) as AlbumCollectionE | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get urlIpfs(): string {
    let value = this.get("urlIpfs");
    return value.toString();
  }

  set urlIpfs(value: string) {
    this.set("urlIpfs", Value.fromString(value));
  }

  get albumId(): BigInt {
    let value = this.get("albumId");
    return value.toBigInt();
  }

  set albumId(value: BigInt) {
    this.set("albumId", Value.fromBigInt(value));
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get envelopesSelled(): BigInt {
    let value = this.get("envelopesSelled");
    return value.toBigInt();
  }

  set envelopesSelled(value: BigInt) {
    this.set("envelopesSelled", Value.fromBigInt(value));
  }

  get albumsRequested(): BigInt {
    let value = this.get("albumsRequested");
    return value.toBigInt();
  }

  set albumsRequested(value: BigInt) {
    this.set("albumsRequested", Value.fromBigInt(value));
  }
}

export class AlbumsFactoryE extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AlbumsFactoryE entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AlbumsFactoryE entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AlbumsFactoryE", id.toString(), this);
  }

  static load(id: string): AlbumsFactoryE | null {
    return store.get("AlbumsFactoryE", id) as AlbumsFactoryE | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get albums(): Array<string> {
    let value = this.get("albums");
    return value.toStringArray();
  }

  set albums(value: Array<string>) {
    this.set("albums", Value.fromStringArray(value));
  }
}

export class UserAlbumE extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserAlbumE entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserAlbumE entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserAlbumE", id.toString(), this);
  }

  static load(id: string): UserAlbumE | null {
    return store.get("UserAlbumE", id) as UserAlbumE | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    return value.toString();
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }
}
